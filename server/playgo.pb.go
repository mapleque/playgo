// Code generated by protoc-gen-go. DO NOT EDIT.
// source: playgo.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	playgo.proto

It has these top-level messages:
	Chess
	OperationRequest
	Frame
	FrameResponse
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cmd int32

const (
	Cmd_NOTHING Cmd = 0
	Cmd_CREATE  Cmd = 1
	Cmd_PUT     Cmd = 2
	Cmd_PASS    Cmd = 3
	Cmd_GIVEUP  Cmd = 4
	Cmd_BACK    Cmd = 5
)

var Cmd_name = map[int32]string{
	0: "NOTHING",
	1: "CREATE",
	2: "PUT",
	3: "PASS",
	4: "GIVEUP",
	5: "BACK",
}
var Cmd_value = map[string]int32{
	"NOTHING": 0,
	"CREATE":  1,
	"PUT":     2,
	"PASS":    3,
	"GIVEUP":  4,
	"BACK":    5,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Turn int32

const (
	Turn_EMPTY Turn = 0
	Turn_BLACK Turn = 1
	Turn_WHITE Turn = 2
)

var Turn_name = map[int32]string{
	0: "EMPTY",
	1: "BLACK",
	2: "WHITE",
}
var Turn_value = map[string]int32{
	"EMPTY": 0,
	"BLACK": 1,
	"WHITE": 2,
}

func (x Turn) String() string {
	return proto.EnumName(Turn_name, int32(x))
}
func (Turn) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FrameResponse_Code int32

const (
	FrameResponse_SUCCESS FrameResponse_Code = 0
	FrameResponse_UNKNOW  FrameResponse_Code = 1
)

var FrameResponse_Code_name = map[int32]string{
	0: "SUCCESS",
	1: "UNKNOW",
}
var FrameResponse_Code_value = map[string]int32{
	"SUCCESS": 0,
	"UNKNOW":  1,
}

func (x FrameResponse_Code) String() string {
	return proto.EnumName(FrameResponse_Code_name, int32(x))
}
func (FrameResponse_Code) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Chess struct {
	Lon int64 `protobuf:"varint,1,opt,name=lon" json:"lon,omitempty"`
	Lat int64 `protobuf:"varint,2,opt,name=lat" json:"lat,omitempty"`
	Who Turn  `protobuf:"varint,3,opt,name=who,enum=mapleque.playgo.Turn" json:"who,omitempty"`
}

func (m *Chess) Reset()                    { *m = Chess{} }
func (m *Chess) String() string            { return proto.CompactTextString(m) }
func (*Chess) ProtoMessage()               {}
func (*Chess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Chess) GetLon() int64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Chess) GetLat() int64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Chess) GetWho() Turn {
	if m != nil {
		return m.Who
	}
	return Turn_EMPTY
}

type OperationRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Cmd   Cmd    `protobuf:"varint,2,opt,name=cmd,enum=mapleque.playgo.Cmd" json:"cmd,omitempty"`
	Chess *Chess `protobuf:"bytes,3,opt,name=chess" json:"chess,omitempty"`
}

func (m *OperationRequest) Reset()                    { *m = OperationRequest{} }
func (m *OperationRequest) String() string            { return proto.CompactTextString(m) }
func (*OperationRequest) ProtoMessage()               {}
func (*OperationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OperationRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *OperationRequest) GetCmd() Cmd {
	if m != nil {
		return m.Cmd
	}
	return Cmd_NOTHING
}

func (m *OperationRequest) GetChess() *Chess {
	if m != nil {
		return m.Chess
	}
	return nil
}

type Frame struct {
	Token   string   `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Chesses []*Chess `protobuf:"bytes,2,rep,name=chesses" json:"chesses,omitempty"`
	Steps   []*Chess `protobuf:"bytes,3,rep,name=steps" json:"steps,omitempty"`
	Next    Turn     `protobuf:"varint,4,opt,name=next,enum=mapleque.playgo.Turn" json:"next,omitempty"`
	Giveup  Turn     `protobuf:"varint,5,opt,name=giveup,enum=mapleque.playgo.Turn" json:"giveup,omitempty"`
	Pass    Turn     `protobuf:"varint,6,opt,name=pass,enum=mapleque.playgo.Turn" json:"pass,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Frame) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *Frame) GetChesses() []*Chess {
	if m != nil {
		return m.Chesses
	}
	return nil
}

func (m *Frame) GetSteps() []*Chess {
	if m != nil {
		return m.Steps
	}
	return nil
}

func (m *Frame) GetNext() Turn {
	if m != nil {
		return m.Next
	}
	return Turn_EMPTY
}

func (m *Frame) GetGiveup() Turn {
	if m != nil {
		return m.Giveup
	}
	return Turn_EMPTY
}

func (m *Frame) GetPass() Turn {
	if m != nil {
		return m.Pass
	}
	return Turn_EMPTY
}

type FrameResponse struct {
	Code  FrameResponse_Code `protobuf:"varint,1,opt,name=code,enum=mapleque.playgo.FrameResponse_Code" json:"code,omitempty"`
	Tips  string             `protobuf:"bytes,2,opt,name=tips" json:"tips,omitempty"`
	Frame *Frame             `protobuf:"bytes,3,opt,name=frame" json:"frame,omitempty"`
}

func (m *FrameResponse) Reset()                    { *m = FrameResponse{} }
func (m *FrameResponse) String() string            { return proto.CompactTextString(m) }
func (*FrameResponse) ProtoMessage()               {}
func (*FrameResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FrameResponse) GetCode() FrameResponse_Code {
	if m != nil {
		return m.Code
	}
	return FrameResponse_SUCCESS
}

func (m *FrameResponse) GetTips() string {
	if m != nil {
		return m.Tips
	}
	return ""
}

func (m *FrameResponse) GetFrame() *Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func init() {
	proto.RegisterType((*Chess)(nil), "mapleque.playgo.Chess")
	proto.RegisterType((*OperationRequest)(nil), "mapleque.playgo.OperationRequest")
	proto.RegisterType((*Frame)(nil), "mapleque.playgo.Frame")
	proto.RegisterType((*FrameResponse)(nil), "mapleque.playgo.FrameResponse")
	proto.RegisterEnum("mapleque.playgo.Cmd", Cmd_name, Cmd_value)
	proto.RegisterEnum("mapleque.playgo.Turn", Turn_name, Turn_value)
	proto.RegisterEnum("mapleque.playgo.FrameResponse_Code", FrameResponse_Code_name, FrameResponse_Code_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PlaygoService service

type PlaygoServiceClient interface {
	Operation(ctx context.Context, opts ...grpc.CallOption) (PlaygoService_OperationClient, error)
}

type playgoServiceClient struct {
	cc *grpc.ClientConn
}

func NewPlaygoServiceClient(cc *grpc.ClientConn) PlaygoServiceClient {
	return &playgoServiceClient{cc}
}

func (c *playgoServiceClient) Operation(ctx context.Context, opts ...grpc.CallOption) (PlaygoService_OperationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlaygoService_serviceDesc.Streams[0], c.cc, "/mapleque.playgo.PlaygoService/Operation", opts...)
	if err != nil {
		return nil, err
	}
	x := &playgoServiceOperationClient{stream}
	return x, nil
}

type PlaygoService_OperationClient interface {
	Send(*OperationRequest) error
	Recv() (*FrameResponse, error)
	grpc.ClientStream
}

type playgoServiceOperationClient struct {
	grpc.ClientStream
}

func (x *playgoServiceOperationClient) Send(m *OperationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *playgoServiceOperationClient) Recv() (*FrameResponse, error) {
	m := new(FrameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PlaygoService service

type PlaygoServiceServer interface {
	Operation(PlaygoService_OperationServer) error
}

func RegisterPlaygoServiceServer(s *grpc.Server, srv PlaygoServiceServer) {
	s.RegisterService(&_PlaygoService_serviceDesc, srv)
}

func _PlaygoService_Operation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlaygoServiceServer).Operation(&playgoServiceOperationServer{stream})
}

type PlaygoService_OperationServer interface {
	Send(*FrameResponse) error
	Recv() (*OperationRequest, error)
	grpc.ServerStream
}

type playgoServiceOperationServer struct {
	grpc.ServerStream
}

func (x *playgoServiceOperationServer) Send(m *FrameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *playgoServiceOperationServer) Recv() (*OperationRequest, error) {
	m := new(OperationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PlaygoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mapleque.playgo.PlaygoService",
	HandlerType: (*PlaygoServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Operation",
			Handler:       _PlaygoService_Operation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "playgo.proto",
}

func init() { proto.RegisterFile("playgo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0x97, 0xbf, 0xa5, 0x77, 0xac, 0x58, 0xd6, 0x40, 0x11, 0x0f, 0x50, 0x82, 0xc4, 0xca,
	0x04, 0xd1, 0x14, 0x1e, 0x78, 0x6e, 0xa3, 0xd0, 0x55, 0x83, 0x36, 0x72, 0x52, 0x26, 0x78, 0x0b,
	0x89, 0xd9, 0x22, 0x9a, 0x38, 0xc4, 0xe9, 0x80, 0x17, 0x1e, 0xf8, 0x3a, 0x7c, 0x49, 0x74, 0x9d,
	0x81, 0xc4, 0xaa, 0xe5, 0xed, 0xe6, 0xde, 0x9f, 0xcf, 0x71, 0x8e, 0x6d, 0xb8, 0x5b, 0x6f, 0xd2,
	0x1f, 0x17, 0xc2, 0xab, 0x1b, 0xd1, 0x0a, 0x7a, 0xaf, 0x4c, 0xeb, 0x0d, 0xff, 0xba, 0xe5, 0x5e,
	0xd7, 0x76, 0x13, 0xb0, 0x82, 0x4b, 0x2e, 0x25, 0x25, 0x60, 0x6c, 0x44, 0xe5, 0x68, 0x63, 0x6d,
	0x62, 0x30, 0x2c, 0x55, 0x27, 0x6d, 0x1d, 0xfd, 0xba, 0x93, 0xb6, 0xf4, 0x08, 0x8c, 0x6f, 0x97,
	0xc2, 0x31, 0xc6, 0xda, 0x64, 0xe4, 0xdf, 0xf7, 0x6e, 0x68, 0x79, 0xc9, 0xb6, 0xa9, 0x18, 0x12,
	0xee, 0x4f, 0x20, 0xab, 0x9a, 0x37, 0x69, 0x5b, 0x88, 0x8a, 0x21, 0x22, 0x5b, 0x7a, 0x08, 0x56,
	0x2b, 0xbe, 0xf0, 0xce, 0x62, 0xc8, 0xba, 0x0f, 0xfa, 0x0c, 0x8c, 0xac, 0xcc, 0x95, 0xc9, 0xc8,
	0x3f, 0xdc, 0x91, 0x0c, 0xca, 0x9c, 0x21, 0x40, 0x5f, 0x80, 0x95, 0xe1, 0x3e, 0x95, 0xf9, 0xbe,
	0xff, 0x60, 0x97, 0xc4, 0x29, 0xeb, 0x20, 0xf7, 0x97, 0x0e, 0xd6, 0x9b, 0x26, 0x2d, 0xf9, 0x2d,
	0xae, 0x27, 0x30, 0x50, 0x20, 0x97, 0x8e, 0x3e, 0x36, 0x7a, 0xf4, 0xfe, 0x62, 0xe8, 0x2f, 0x5b,
	0x5e, 0xa3, 0x7f, 0x1f, 0xdf, 0x41, 0xf4, 0x39, 0x98, 0x15, 0xff, 0xde, 0x3a, 0x66, 0x5f, 0x52,
	0x0a, 0xa1, 0x2f, 0xc1, 0xbe, 0x28, 0xae, 0xf8, 0xb6, 0x76, 0xac, 0x3e, 0xf8, 0x1a, 0x42, 0xe5,
	0x3a, 0x95, 0xd2, 0xb1, 0x7b, 0x95, 0x11, 0x71, 0x7f, 0x6b, 0x70, 0xa0, 0x42, 0x60, 0x5c, 0xd6,
	0xa2, 0x92, 0x9c, 0xbe, 0x06, 0x33, 0x13, 0x39, 0x57, 0x59, 0x8c, 0xfc, 0xa7, 0x3b, 0x8b, 0xff,
	0xa3, 0xbd, 0x40, 0xe4, 0x9c, 0xa9, 0x05, 0x94, 0x82, 0xd9, 0x16, 0xb5, 0x54, 0xc7, 0x34, 0x64,
	0xaa, 0xc6, 0x44, 0x3e, 0x23, 0x7f, 0xeb, 0x89, 0x74, 0x6a, 0x1d, 0xe4, 0x3e, 0x06, 0x13, 0xf5,
	0xe8, 0x3e, 0x0c, 0xe2, 0x75, 0x10, 0x84, 0x71, 0x4c, 0xf6, 0x28, 0x80, 0xbd, 0x5e, 0x9e, 0x2d,
	0x57, 0xe7, 0x44, 0x3b, 0x9e, 0x83, 0x11, 0x94, 0x39, 0xce, 0x97, 0xab, 0xe4, 0x74, 0xb1, 0x9c,
	0x77, 0xf3, 0x80, 0x85, 0xd3, 0x24, 0x24, 0x1a, 0x1d, 0x80, 0x11, 0xad, 0x13, 0xa2, 0xd3, 0x3b,
	0x60, 0x46, 0xd3, 0x38, 0x26, 0x06, 0x8e, 0xe7, 0x8b, 0xf7, 0xe1, 0x3a, 0x22, 0x26, 0x76, 0x67,
	0xd3, 0xe0, 0x8c, 0x58, 0xc7, 0x47, 0x60, 0x62, 0x08, 0x74, 0x08, 0x56, 0xf8, 0x2e, 0x4a, 0x3e,
	0x90, 0x3d, 0x2c, 0x67, 0x6f, 0x71, 0xaa, 0x61, 0x79, 0x7e, 0xba, 0x48, 0x42, 0xa2, 0xfb, 0x19,
	0x1c, 0x44, 0x6a, 0xa7, 0x31, 0x6f, 0xae, 0x8a, 0x8c, 0x53, 0x06, 0xc3, 0x7f, 0xb7, 0x96, 0x3e,
	0xd9, 0xf9, 0x9f, 0x9b, 0x37, 0xfa, 0xe1, 0xa3, 0xfe, 0x00, 0x27, 0xda, 0x89, 0x36, 0xb3, 0x3f,
	0x9a, 0x65, 0x5a, 0x54, 0x9f, 0x6c, 0xf5, 0xfe, 0x5e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x74,
	0xde, 0x69, 0xae, 0x8f, 0x03, 0x00, 0x00,
}
